// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id      		String 			@id @default(uuid())
	username		String  		@unique 
	password		String
    email   		String  		@unique
	firstName 		String
	lastName		String
	phoneNum		String
	code			String			@default("000000")
	dateCreated		DateTime		@default(now())
	dateUpdated		DateTime		@default(now())
	admin			Boolean			@default(false)
	suspended		Boolean			@default(false)
	verified		Boolean			@default(false)
	books			Book[]	
	cart			Cart[]	
	booksBought		Transaction[]	@relation("booksBought")
	booksSold		Transaction[]	@relation("booksSold")
	buying			BuyRequest[]	@relation("buyer")
	selling			BuyRequest[]	@relation("seller")
}

model Book {
	id      		String 			@id @default(uuid())
	title			String
	isbn			String
	owner			User			@relation(fields: [ownerId], references: [id])
	ownerId			String	
	course			Course 			@relation(fields: [courseId], references: [id])
	courseId		String
	dateCreated		DateTime		@default(now())
	dateUpdated		DateTime		@default(now())
	price			Float			@default(0.0)
	description		String			@default("")
	cart			Cart[]
	buyRequest		BuyRequest[]
	transactions	Transaction[]
	imageLink		String			@default("")
	sold			Boolean			@default(false)
	deleted			Boolean 		@default(false)
}

model Cart {
	user			User			@relation(fields: [userId], references: [id])
	userId			String		
	book			Book			@relation(fields: [bookId], references: [id])
	bookId			String		

	@@id([userId, bookId])
}

model Course {
	id      		String 			@id @default(uuid())
	name			String
	university		String
	dateCreated		DateTime		@default(now())
	dateUpdated		DateTime		@default(now())
	books			Book[]	

	@@unique([name, university])
}

model BuyRequest {
	seller			User			@relation("seller", fields: [sellerId], references: [id])
	sellerId		String			
	buyer			User			@relation("buyer", fields: [buyerId], references: [id])
	buyerId			String
	book			Book			@relation(fields: [bookId], references: [id])
	bookId			String
	content			String			
	dateCreated		DateTime		@default(now())
	read			Boolean			@default(false)
	approved		Boolean			@default(false)
	denied			Boolean			@default(false)
	completed		Boolean			@default(false)

	@@id([sellerId, buyerId, bookId])
}

model Transaction {
	buyer			User			@relation("booksBought", fields: [buyerId], references: [id])
	buyerId			String
	seller			User			@relation("booksSold", fields: [sellerId], references: [id])
	sellerId		String			
	book			Book			@relation(fields: [bookId], references: [id])
	bookId			String
	dateCompleted	DateTime		@default(now())

	@@id([sellerId, buyerId, bookId])
}